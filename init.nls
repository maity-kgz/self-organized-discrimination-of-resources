to setup-shelters
  ;; https://math.stackexchange.com/questions/2548513/maximum-number-of-circle-packing-into-a-rectangle
  ;;let worldArea world-width * world-height
  ;;let max-R max list other-R target-R
  ;;if ((worldArea * pi) / (2 * sqrt 3)) / ((max-R * max-R) / pi) < shelters-number  
  if (shelters-number * other-R + target-R) > (world-width / 1.5) ;; Experimentally pick up 1.5, Or uncomment 3 lines above and comment out this line, to run on "optimum circle packing" method.
  [
    user-message (word "Too many shelters or too big shelter radius given. Can not place shelters on the arena. Click HALT and reset shelters params." (shelters-number * other-R + target-R) " > " (world-width / 2))
    stop
  ]
  
  ;;set random-shelter2 random-float -0.7
  let cur-shelter shelters-number
  let target-shelter true
  
  repeat shelters-number[
    
    let shelter-x ((random-float 0.7) * one-of[-1 1])    
    let shelter-y ((random-float 0.7) * one-of[-1 1])
    
    while [isPatchUsedForShelter shelter-x shelter-y]
    [
      set shelter-x ((random-float 0.7) * one-of[-1 1])    
      set shelter-y ((random-float 0.7) * one-of[-1 1])
    ]
    
    
    
    
    ask patches[
      
      ifelse target-shelter[
        if (distancexy ceiling((shelter-x * max-pxcor)) ceiling((shelter-y * max-pycor))) < target-R
        [ set shelter-id cur-shelter ]  
      ]
      [
        if (distancexy ceiling((shelter-x * max-pxcor)) ceiling((shelter-y * max-pycor))) < other-R
        [ set shelter-id cur-shelter ]  
      ]
    ]
    
    set cur-shelter cur-shelter - 1     
    set target-shelter false
    
  ] 
  
end

to-report isPatchUsedForShelter[x y]
  
  let patchAlreadyUsed false
  let maxRadius 0
  ifelse other-R > target-R
  [set maxRadius other-R]
  [set maxRadius target-R]
  
  ask patches[      
    if (distancexy ceiling((x * max-pxcor)) ceiling((y * max-pycor))) < (maxRadius + 2)
        [
          if (shelter-id > 0) 
              [set patchAlreadyUsed true ]
         ]        
    
    ]
  
    report patchAlreadyUsed
  
end

to recolor-patch  ;; patch procedure
  ;; give color to nest and food sources
  ask patches[
   if shelter-id = shelters-number ;; shelters-number used to identify target shelter, i.e target shelters ID equal to value of "shelters-number" slider
    [  set pcolor green ] 
   if (shelter-id > 0 and shelter-id != shelters-number)   ;;shelter-id is patch owned variable
    [ set pcolor red]
  ]
    
    
end


to setup-robots
  create-robots robots-number [ 
    setxy round(random-xcor) round(random-ycor )
    set size 1
    set shape "default"
    
    set explore 1
    set stay 0
    set backToResource 0 
  ]
end

to separate-robots ;; turtle procedure
  ask robots[
  if any? other turtles-here [
    fd 1
    separate-robots
  ]  ]
end